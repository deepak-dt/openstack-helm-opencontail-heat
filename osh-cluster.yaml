# openstack keypair create --public-key ~/.ssh/id_rsa.pub osh-vm-key
# openstack orchestration template validate -t osh-cluster.yaml
# openstack stack delete -y --wait osh-cluster || true
# openstack stack create --wait -t osh-cluster.yaml osh-cluster
heat_template_version: 2016-10-14

parameters:
  public_net:
    type: string
    default: public
  image:
    type: string
    default: ubuntu-16.04
  ssh_key:
    type: string
    default: osh-vm-key
  private_net_cidr:
    type: string
    default: 10.11.11.0/24
  storage_net_cidr:
    type: string
    default: 10.11.12.0/24
  tunnel_net_cidr:
    type: string
    default: 10.11.13.0/24
  VROUTER_GATEWAY:
    type: string
    default: 10.11.90.1
  CONTRAIL_PHYSICAL_INTERFACE:
    type: string
    default: ens4
  osh_controller_1_hostname:
    type: string
    default: osh-contrail-multinode-1
  osh_controller_2_hostname:
    type: string
    default: osh-contrail-multinode-2
  osh_controller_3_hostname:
    type: string
    default: osh-contrail-multinode-3
  osh_compute_1_hostname:
    type: string
    default: osh-contrail-multinode-4
  osh_compute_2_hostname:
    type: string
    default: osh-contrail-multinode-5
  compute_1_vrouter_mode:
    type: string
    default: kernel
  compute_2_vrouter_mode:
    type: string
    default: kernel
  OSH_EXTRA_HELM_ARGS:
    type: string
    default: "--values=./tools/overrides/releases/ocata/kolla.yaml"

resources:
  flavor:
    type: OS::Nova::Flavor
    properties:
      disk: 256
      ram: 131072
      vcpus: 12

  deploy_key:
    type: OS::Nova::KeyPair
    properties:
      name: deploy_key
      save_private_key: true

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: {get_param: public_net}

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: private_subnet }

  private_net:
    type: OS::Neutron::Net

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network: { get_resource: private_net }
      cidr: {get_param: private_net_cidr }
      dns_nameservers:
        - 8.8.8.8
        - 8.8.4.4

  storage_net:
    type: OS::Neutron::Net

  storage_subnet:
    type: OS::Neutron::Subnet
    properties:
      gateway_ip: null
      network: { get_resource: storage_net }
      cidr: {get_param: storage_net_cidr }

  tunnel_net:
    type: OS::Neutron::Net

  tunnel_subnet:
    type: OS::Neutron::Subnet
    properties:
      gateway_ip: null
      network: { get_resource: tunnel_net }
      cidr: {get_param: tunnel_net_cidr }


  node_one_private_net_port:
    type: OS::Neutron::Port
    properties:
      network: {get_resource: private_net}
      fixed_ips:
        - subnet: { get_resource: private_subnet }
      port_security_enabled: false

  node_two_private_net_port:
    type: OS::Neutron::Port
    properties:
      network: {get_resource: private_net}
      fixed_ips:
        - subnet: { get_resource: private_subnet }
      port_security_enabled: false

  node_three_private_net_port:
    type: OS::Neutron::Port
    properties:
      network: {get_resource: private_net}
      fixed_ips:
        - subnet: { get_resource: private_subnet }
      port_security_enabled: false

  node_four_private_net_port:
    type: OS::Neutron::Port
    properties:
      network: {get_resource: private_net}
      fixed_ips:
        - subnet: { get_resource: private_subnet }
      port_security_enabled: false

  node_five_private_net_port:
    type: OS::Neutron::Port
    properties:
      network: {get_resource: private_net}
      fixed_ips:
        - subnet: { get_resource: private_subnet }
      port_security_enabled: false


  node_one_storage_net_port:
    type: OS::Neutron::Port
    properties:
      network: {get_resource: storage_net}
      fixed_ips:
        - subnet: { get_resource: storage_subnet }
      port_security_enabled: false

  node_two_storage_net_port:
    type: OS::Neutron::Port
    properties:
      network: {get_resource: storage_net}
      fixed_ips:
        - subnet: { get_resource: storage_subnet }
      port_security_enabled: false

  node_three_storage_net_port:
    type: OS::Neutron::Port
    properties:
      network: {get_resource: storage_net}
      fixed_ips:
        - subnet: { get_resource: storage_subnet }
      port_security_enabled: false

  node_four_storage_net_port:
    type: OS::Neutron::Port
    properties:
      network: {get_resource: storage_net}
      fixed_ips:
        - subnet: { get_resource: storage_subnet }
      port_security_enabled: false

  node_five_storage_net_port:
    type: OS::Neutron::Port
    properties:
      network: {get_resource: storage_net}
      fixed_ips:
        - subnet: { get_resource: storage_subnet }
      port_security_enabled: false


  node_one_tunnel_net_port:
    type: OS::Neutron::Port
    properties:
      network: {get_resource: tunnel_net}
      fixed_ips:
        - subnet: { get_resource: tunnel_subnet }
      port_security_enabled: false

  node_two_tunnel_net_port:
    type: OS::Neutron::Port
    properties:
      network: {get_resource: tunnel_net}
      fixed_ips:
        - subnet: { get_resource: tunnel_subnet }
      port_security_enabled: false

  node_three_tunnel_net_port:
    type: OS::Neutron::Port
    properties:
      network: {get_resource: tunnel_net}
      fixed_ips:
        - subnet: { get_resource: tunnel_subnet }
      port_security_enabled: false

  node_four_tunnel_net_port:
    type: OS::Neutron::Port
    properties:
      network: {get_resource: tunnel_net}
      fixed_ips:
        - subnet: { get_resource: tunnel_subnet }
      port_security_enabled: false

  node_five_tunnel_net_port:
    type: OS::Neutron::Port
    properties:
      network: {get_resource: tunnel_net}
      fixed_ips:
        - subnet: { get_resource: tunnel_subnet }
      port_security_enabled: false

  node_one:
    type: OS::Nova::Server
    properties:
      image: {get_param: image}
      flavor: { get_resource: flavor}
      key_name: {get_param: ssh_key}
      networks:
        - port: { get_resource: node_one_private_net_port }
        - port: { get_resource: node_one_storage_net_port }
        - port: { get_resource: node_one_tunnel_net_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash -v
            echo "$node_admin_ip $(hostname -s)" >> /etc/hosts
            sudo -H su -c 'echo "$deploy_public_key" >> ~/.ssh/authorized_keys' ubuntu

            mkdir -p /etc/openstack-helm
            cat > /etc/openstack-helm/deploy-key.pem << EOF
            $deploy_private_key
            EOF
            chmod 0600 /etc/openstack-helm/deploy-key.pem

            cat > /usr/local/bin/ssh-one <<EOF
            ssh -i /etc/openstack-helm/deploy-key.pem $node_one_ip $@
            EOF
            chmod +x /usr/local/bin/ssh-one

            cat > /usr/local/bin/ssh-two <<EOF
            ssh -i /etc/openstack-helm/deploy-key.pem $node_two_ip $@
            EOF
            chmod +x /usr/local/bin/ssh-two

            cat > /usr/local/bin/ssh-three <<EOF
            ssh -i /etc/openstack-helm/deploy-key.pem $node_three_ip $@
            EOF
            chmod +x /usr/local/bin/ssh-three

            cat > /usr/local/bin/ssh-four <<EOF
            ssh -i /etc/openstack-helm/deploy-key.pem $node_four_ip $@
            EOF
            chmod +x /usr/local/bin/ssh-four

            cat > /usr/local/bin/ssh-five <<EOF
            ssh -i /etc/openstack-helm/deploy-key.pem $node_five_ip $@
            EOF
            chmod +x /usr/local/bin/ssh-five

            cat > /etc/openstack-helm/nodes << EOF
            $node_one_ip
            $node_two_ip
            $node_three_ip
            $node_four_ip
            $node_five_ip
            EOF

            cat > /etc/openstack-helm/storage-subnet << EOF
            $storage_subnet
            EOF

            cat > /etc/openstack-helm/tunnel-subnet << EOF
            $tunnel_subnet
            EOF

            chown -R ubuntu: /etc/openstack-helm

            apt-get update
            apt-get install --no-install-recommends -y \
                    ca-certificates \
                    git \
                    make \
                    jq \
                    nmap \
                    curl

            git clone https://git.openstack.org/openstack/openstack-helm-infra /opt/openstack-helm-infra
            
            line_to_rep_orig="      port: 9091"
            line_to_rep_new="      port: 9099"
            sudo sed -n "1h;2,\$H;\${g;s/$line_to_rep_orig/$line_to_rep_new/;p}" /opt/openstack-helm-infra/calico/values.yaml > /tmp/calcio-values.yaml
            sudo mv /tmp/calcio-values.yaml /opt/openstack-helm-infra/calico/values.yaml

            line_to_rep_orig="    FELIX_PROMETHEUSMETRICSPORT: \"9091\""
            line_to_rep_new="    FELIX_PROMETHEUSMETRICSPORT: \"9099\""
            sudo sed -n "1h;2,\$H;\${g;s/$line_to_rep_orig/$line_to_rep_new/;p}" /opt/openstack-helm-infra/calico/values.yaml > /tmp/calcio-values.yaml
            sudo mv /tmp/calcio-values.yaml /opt/openstack-helm-infra/calico/values.yaml

            cat > /opt/openstack-helm-infra/tools/gate/devel/multinode-inventory.yaml <<EOF
            all:
              children:
                primary:
                  hosts:
                    node_one:
                      ansible_port: 22
                      ansible_host: $node_one_ip
                      ansible_user: ubuntu
                      ansible_ssh_private_key_file: /etc/openstack-helm/deploy-key.pem
                      ansible_ssh_extra_args: -o StrictHostKeyChecking=no
                nodes:
                  hosts:
                    node_two:
                      ansible_port: 22
                      ansible_host: $node_two_ip
                      ansible_user: ubuntu
                      ansible_ssh_private_key_file: /etc/openstack-helm/deploy-key.pem
                      ansible_ssh_extra_args: -o StrictHostKeyChecking=no
                    node_three:
                      ansible_port: 22
                      ansible_host: $node_three_ip
                      ansible_user: ubuntu
                      ansible_ssh_private_key_file: /etc/openstack-helm/deploy-key.pem
                      ansible_ssh_extra_args: -o StrictHostKeyChecking=no
                    node_four:
                      ansible_port: 22
                      ansible_host: $node_four_ip
                      ansible_user: ubuntu
                      ansible_ssh_private_key_file: /etc/openstack-helm/deploy-key.pem
                      ansible_ssh_extra_args: -o StrictHostKeyChecking=no
                    node_five:
                      ansible_port: 22
                      ansible_host: $node_five_ip
                      ansible_user: ubuntu
                      ansible_ssh_private_key_file: /etc/openstack-helm/deploy-key.pem
                      ansible_ssh_extra_args: -o StrictHostKeyChecking=no
            EOF

            function net_default_iface {
             sudo ip -4 route list 0/0 | awk '{ print $5; exit }'
            }
            cat > /opt/openstack-helm-infra/tools/gate/devel/multinode-vars.yaml <<EOF
            kubernetes:
              network:
                default_device: $(net_default_iface)
              cluster:
                cni: calico
                pod_subnet: 192.169.0.0/16
                domain: cluster.local
            EOF

            chown -R ubuntu: /opt

            sudo -H su -c 'cd /opt/openstack-helm-infra; make dev-deploy setup-host multinode' ubuntu
            sudo -H su -c 'cd /opt/openstack-helm-infra; make dev-deploy k8s multinode' ubuntu
            sudo -H su -c 'cd /opt/openstack-helm-infra; make all' ubuntu

            sudo -H su -c 'git clone https://git.openstack.org/openstack/openstack-helm /opt/openstack-helm' ubuntu
            sudo -H su -c 'cd /opt/openstack-helm; make all' ubuntu
            
            ## Kubernetes Node DNS Resolution
            export KUBE_DNS_IP=`kubectl get svc kube-dns --namespace=kube-system | tail -1 | awk '{print $3}'`
            export put_entry_for_kube_dns="nameserver $KUBE_DNS_IP # Kubernetes DNS Server"
            echo "search openstack.svc.cluster.local svc.cluster.local cluster.local contrail.juniper.netjuniper.netjnpr.net" | sudo tee -a /etc/resolv.conf
            
            ### To persist these settings across reboots: the nameservers and search entries
            line_to_search_2="iface ens3 inet dhcp"
            sudo sed -i "/$line_to_search_2/a$put_entry_for_kube_dns" /etc/network/interfaces.d/50-cloud-init.cfg
            
            ### To persist these settings across reboots: the nameservers and search entries
            echo "search openstack.svc.cluster.local svc.cluster.local cluster.local contrail.juniper.netjuniper.netjnpr.net" | sudo tee -a /etc/resolvconf/resolv.conf.d/base
            echo "options ndots:5 timeout:1 attempts:1" | sudo tee -a /etc/resolvconf/resolv.conf.d/base

            sudo apt-get install -y ipcalc
            sudo -H su -c 'cd /opt/openstack-helm; ./tools/deployment/multinode/010-setup-client.sh' ubuntu

            sudo -H su -c 'cd /opt/openstack-helm; ./tools/deployment/multinode/020-ingress.sh $0' ubuntu $OSH_EXTRA_HELM_ARGS
            sudo -H su -c 'cd /opt/openstack-helm; ./tools/deployment/multinode/030-ceph.sh $0' ubuntu $OSH_EXTRA_HELM_ARGS
            sudo -H su -c 'cd /opt/openstack-helm; ./tools/deployment/multinode/040-ceph-ns-activate.sh $0' ubuntu $OSH_EXTRA_HELM_ARGS
            sudo -H su -c 'cd /opt/openstack-helm; ./tools/deployment/multinode/050-mariadb.sh $0' ubuntu $OSH_EXTRA_HELM_ARGS
            sudo -H su -c 'cd /opt/openstack-helm; ./tools/deployment/multinode/060-rabbitmq.sh $0' ubuntu $OSH_EXTRA_HELM_ARGS
            sudo -H su -c 'cd /opt/openstack-helm; ./tools/deployment/multinode/070-memcached.sh $0' ubuntu $OSH_EXTRA_HELM_ARGS
            sudo -H su -c 'cd /opt/openstack-helm; ./tools/deployment/multinode/080-keystone.sh $0' ubuntu $OSH_EXTRA_HELM_ARGS
            sudo -H su -c 'cd /opt/openstack-helm; ./tools/deployment/multinode/090-ceph-radosgateway.sh $0' ubuntu $OSH_EXTRA_HELM_ARGS
            sudo -H su -c 'cd /opt/openstack-helm; ./tools/deployment/multinode/100-glance.sh $0' ubuntu $OSH_EXTRA_HELM_ARGS
            sudo -H su -c 'cd /opt/openstack-helm; ./tools/deployment/multinode/110-cinder.sh $0' ubuntu $OSH_EXTRA_HELM_ARGS
            sudo -H su -c 'cd /opt/openstack-helm; ./tools/deployment/multinode/150-heat.sh $0' ubuntu $OSH_EXTRA_HELM_ARGS
            sudo -H su -c 'cd /opt/openstack-helm; ./tools/deployment/developer/ceph/100-horizon.sh $0' ubuntu $OSH_EXTRA_HELM_ARGS

            export KUBECONFIG=/home/ubuntu/.kube/config

            # Label Openstack compute nodes
            for NODE in $(kubectl get nodes -o name | awk -F '/' '{ print $NF }'); do kubectl label node $NODE --overwrite openstack-compute-node=disabled ; done 
            kubectl label node $(kubectl get node -o name | awk -F '/' '{ print $NF }'  | grep $osh_compute_1_hostname) --overwrite openstack-compute-node=enabled 
            kubectl label node $(kubectl get node -o name | awk -F '/' '{ print $NF }'  | grep $osh_compute_2_hostname) --overwrite openstack-compute-node=enabled 
            
            # Label Openstack control nodes
            for NODE in $(kubectl get nodes -o name | awk -F '/' '{ print $NF }'); do kubectl label node $NODE --overwrite openstack-control-plane=disabled ; done 
            kubectl label node $(kubectl get node -o name | awk -F '/' '{ print $NF }'  | grep $osh_controller_1_hostname) --overwrite openstack-control-plane=enabled 
            kubectl label node $(kubectl get node -o name | awk -F '/' '{ print $NF }'  | grep $osh_controller_2_hostname) --overwrite openstack-control-plane=enabled 
            kubectl label node $(kubectl get node -o name | awk -F '/' '{ print $NF }'  | grep $osh_controller_3_hostname) --overwrite openstack-control-plane=enabled 
           
            sudo -H su -c 'cd /opt/openstack-helm; ./tools/deployment/multinode/120-openvswitch.sh' ubuntu $OSH_EXTRA_HELM_ARGS
            sudo -H su -c 'cd /opt/openstack-helm; ./tools/deployment/multinode/130-libvirt.sh $0' ubuntu $OSH_EXTRA_HELM_ARGS
            sudo -H su -c 'cd /opt/openstack-helm; ./tools/deployment/multinode/140-compute-kit.sh $0' ubuntu $OSH_EXTRA_HELM_ARGS

            curl -L http://paste.openstack.org/raw/662556/ > /opt/heat.yaml
            export OS_CLOUD=openstack_helm
            export OSH_EXT_NET_NAME="public"
            export OSH_VM_FLAVOR="m1.tiny"
            export OSH_VM_KEY_STACK="heat-vm-key"
            export OSH_PRIVATE_SUBNET="10.0.0.0/24"

            # NOTE(portdirect): We do this fancy, and seemingly pointless, footwork to get
            # the full image name for the cirros Image without having to be explicit.
            export IMAGE_NAME=$(openstack image show -f value -c name \
              $(openstack image list -f csv | awk -F ',' '{ print $2 "," $1 }' | \
                grep "^\"Cirros" | head -1 | awk -F ',' '{ print $2 }' | tr -d '"'))

            # Setup SSH Keypair in Nova
            mkdir -p ${HOME}/.ssh
            openstack keypair create --private-key ${HOME}/.ssh/osh_key ${OSH_VM_KEY_STACK}
            chmod 600 ${HOME}/.ssh/osh_key

            openstack stack create --wait \
                --parameter image="${IMAGE_NAME}" \
                --parameter flavor=${OSH_VM_FLAVOR} \
                --parameter ssh_key=${OSH_VM_KEY_STACK} \
                --parameter cidr=${OSH_PRIVATE_SUBNET} \
                -t /opt/heat.yaml \
                heat-basic-vm-deployment

            sleep 60
            openstack console log show $(openstack server list -f value -c ID)

          params:
            $node_admin_ip: {get_attr: [node_one_private_net_port, fixed_ips, 0, ip_address]}
            $deploy_public_key: {get_attr: [deploy_key, public_key]}
            $deploy_private_key: {get_attr: [deploy_key, private_key]}
            $node_one_ip: {get_attr: [node_one_private_net_port, fixed_ips, 0, ip_address]}
            $node_two_ip: {get_attr: [node_two_private_net_port, fixed_ips, 0, ip_address]}
            $node_three_ip: {get_attr: [node_three_private_net_port, fixed_ips, 0, ip_address]}
            $node_four_ip: {get_attr: [node_four_private_net_port, fixed_ips, 0, ip_address]}
            $node_five_ip: {get_attr: [node_five_private_net_port, fixed_ips, 0, ip_address]}
            $node_one_contrail_ip: {get_attr: [node_one_storage_net_port, fixed_ips, 0, ip_address]}
            $node_two_contrail_ip: {get_attr: [node_two_storage_net_port, fixed_ips, 0, ip_address]}
            $node_three_contrail_ip: {get_attr: [node_three_storage_net_port, fixed_ips, 0, ip_address]}
            $storage_subnet: {get_param: storage_net_cidr }
            $tunnel_subnet: {get_param: tunnel_net_cidr }
            $VROUTER_GATEWAY: {get_param: VROUTER_GATEWAY }
            $CONTRAIL_PHYSICAL_INTERFACE: {get_param: CONTRAIL_PHYSICAL_INTERFACE }
            $osh_controller_1_hostname: {get_param: osh_controller_1_hostname }
            $osh_controller_2_hostname: {get_param: osh_controller_2_hostname }
            $osh_controller_3_hostname: {get_param: osh_controller_3_hostname }
            $osh_compute_1_hostname: {get_param: osh_compute_1_hostname }
            $compute_1_vrouter_mode: {get_param: compute_1_vrouter_mode }
            $export osh_compute_2_hostname: {get_param: osh_compute_2_hostname }
            $compute_2_vrouter_mode: {get_param: compute_2_vrouter_mode }
            $OSH_EXTRA_HELM_ARGS: {get_param: OSH_EXTRA_HELM_ARGS }
            
  node_two:
    type: OS::Nova::Server
    properties:
      image: {get_param: image}
      flavor: { get_resource: flavor}
      key_name: {get_param: ssh_key}
      networks:
        - port: { get_resource: node_two_private_net_port }
        - port: { get_resource: node_two_storage_net_port }
        - port: { get_resource: node_two_tunnel_net_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash -v
            echo "$node_admin_ip $(hostname -s)" >> /etc/hosts
            sudo -H su -c 'echo "$deploy_public_key" >> ~/.ssh/authorized_keys' ubuntu
            
            ## Kubernetes Node DNS Resolution
            echo "search openstack.svc.cluster.local svc.cluster.local cluster.local" | sudo tee -a /etc/resolv.conf
            
            ### To persist these settings across reboots: the nameservers and search entries
            echo "search openstack.svc.cluster.local svc.cluster.local cluster.local" | sudo tee -a /etc/resolvconf/resolv.conf.d/base
            echo "options ndots:5 timeout:1 attempts:1" | sudo tee -a /etc/resolvconf/resolv.conf.d/base

            apt-get update
            apt-get install --no-install-recommends -y \
                    git

            sudo -H chown -R ubuntu: /opt
            sudo -H su -c 'git clone https://git.openstack.org/openstack/openstack-helm-infra /opt/openstack-helm-infra' ubuntu
            sudo -H su -c 'cd /opt/openstack-helm-infra; git checkout 27c46b56032abaea47fa7e7424fb6ead55061137' ubuntu
            
            line_to_rep_orig="      port: 9091"
            line_to_rep_new="      port: 9099"
            sudo sed -n "1h;2,\$H;\${g;s/$line_to_rep_orig/$line_to_rep_new/;p}" /opt/openstack-helm-infra/calico/values.yaml > /tmp/calcio-values.yaml
            sudo mv /tmp/calcio-values.yaml /opt/openstack-helm-infra/calico/values.yaml
            
            line_to_rep_orig="    FELIX_PROMETHEUSMETRICSPORT: \"9091\""
            line_to_rep_new="    FELIX_PROMETHEUSMETRICSPORT: \"9099\""
            sudo sed -n "1h;2,\$H;\${g;s/$line_to_rep_orig/$line_to_rep_new/;p}" /opt/openstack-helm-infra/calico/values.yaml > /tmp/calcio-values.yaml
            sudo mv /tmp/calcio-values.yaml /opt/openstack-helm-infra/calico/values.yaml
          params:
            $node_admin_ip: {get_attr: [node_two_private_net_port, fixed_ips, 0, ip_address]}
            $deploy_public_key: {get_attr: [deploy_key, public_key]}

  node_three:
    type: OS::Nova::Server
    properties:
      image: {get_param: image}
      flavor: { get_resource: flavor}
      key_name: {get_param: ssh_key}
      networks:
        - port: { get_resource: node_three_private_net_port }
        - port: { get_resource: node_three_storage_net_port }
        - port: { get_resource: node_three_tunnel_net_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash -v
            echo "$node_admin_ip $(hostname -s)" >> /etc/hosts
            sudo -H su -c 'echo "$deploy_public_key" >> ~/.ssh/authorized_keys' ubuntu

            ## Kubernetes Node DNS Resolution
            echo "search openstack.svc.cluster.local svc.cluster.local cluster.local" | sudo tee -a /etc/resolv.conf

            ### To persist these settings across reboots: the nameservers and search entries
            echo "search openstack.svc.cluster.local svc.cluster.local cluster.local" | sudo tee -a /etc/resolvconf/resolv.conf.d/base
            echo "options ndots:5 timeout:1 attempts:1" | sudo tee -a /etc/resolvconf/resolv.conf.d/base

            apt-get update
            apt-get install --no-install-recommends -y \
                    git

            sudo -H chown -R ubuntu: /opt
            sudo -H su -c 'git clone https://git.openstack.org/openstack/openstack-helm-infra /opt/openstack-helm-infra' ubuntu
            sudo -H su -c 'cd /opt/openstack-helm-infra; git checkout 27c46b56032abaea47fa7e7424fb6ead55061137' ubuntu
            
            line_to_rep_orig="      port: 9091"
            line_to_rep_new="      port: 9099"
            sudo sed -n "1h;2,\$H;\${g;s/$line_to_rep_orig/$line_to_rep_new/;p}" /opt/openstack-helm-infra/calico/values.yaml > /tmp/calcio-values.yaml
            sudo mv /tmp/calcio-values.yaml /opt/openstack-helm-infra/calico/values.yaml
            
            line_to_rep_orig="    FELIX_PROMETHEUSMETRICSPORT: \"9091\""
            line_to_rep_new="    FELIX_PROMETHEUSMETRICSPORT: \"9099\""
            sudo sed -n "1h;2,\$H;\${g;s/$line_to_rep_orig/$line_to_rep_new/;p}" /opt/openstack-helm-infra/calico/values.yaml > /tmp/calcio-values.yaml
            sudo mv /tmp/calcio-values.yaml /opt/openstack-helm-infra/calico/values.yaml
          params:
            $node_admin_ip: {get_attr: [node_three_private_net_port, fixed_ips, 0, ip_address]}
            $deploy_public_key: {get_attr: [deploy_key, public_key]}

  node_four:
    type: OS::Nova::Server
    properties:
      image: {get_param: image}
      flavor: { get_resource: flavor}
      key_name: {get_param: ssh_key}
      networks:
        - port: { get_resource: node_four_private_net_port }
        - port: { get_resource: node_four_storage_net_port }
        - port: { get_resource: node_four_tunnel_net_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash -v
            echo "$node_admin_ip $(hostname -s)" >> /etc/hosts
            sudo -H su -c 'echo "$deploy_public_key" >> ~/.ssh/authorized_keys' ubuntu

            ## Kubernetes Node DNS Resolution
            echo "search openstack.svc.cluster.local svc.cluster.local cluster.local" | sudo tee -a /etc/resolv.conf

            ### To persist these settings across reboots: the nameservers and search entries
            echo "search openstack.svc.cluster.local svc.cluster.local cluster.local" | sudo tee -a /etc/resolvconf/resolv.conf.d/base
            echo "options ndots:5 timeout:1 attempts:1" | sudo tee -a /etc/resolvconf/resolv.conf.d/base

            apt-get update
            apt-get install --no-install-recommends -y \
                    git

            sudo -H chown -R ubuntu: /opt
            sudo -H su -c 'git clone https://git.openstack.org/openstack/openstack-helm-infra /opt/openstack-helm-infra' ubuntu
            sudo -H su -c 'cd /opt/openstack-helm-infra; git checkout 27c46b56032abaea47fa7e7424fb6ead55061137' ubuntu
            
            line_to_rep_orig="      port: 9091"
            line_to_rep_new="      port: 9099"
            sudo sed -n "1h;2,\$H;\${g;s/$line_to_rep_orig/$line_to_rep_new/;p}" /opt/openstack-helm-infra/calico/values.yaml > /tmp/calcio-values.yaml
            sudo mv /tmp/calcio-values.yaml /opt/openstack-helm-infra/calico/values.yaml
            
            line_to_rep_orig="    FELIX_PROMETHEUSMETRICSPORT: \"9091\""
            line_to_rep_new="    FELIX_PROMETHEUSMETRICSPORT: \"9099\""
            sudo sed -n "1h;2,\$H;\${g;s/$line_to_rep_orig/$line_to_rep_new/;p}" /opt/openstack-helm-infra/calico/values.yaml > /tmp/calcio-values.yaml
            sudo mv /tmp/calcio-values.yaml /opt/openstack-helm-infra/calico/values.yaml
          params:
            $node_admin_ip: {get_attr: [node_four_private_net_port, fixed_ips, 0, ip_address]}
            $deploy_public_key: {get_attr: [deploy_key, public_key]}

  node_five:
    type: OS::Nova::Server
    properties:
      image: {get_param: image}
      flavor: { get_resource: flavor}
      key_name: {get_param: ssh_key}
      networks:
        - port: { get_resource: node_five_private_net_port }
        - port: { get_resource: node_five_storage_net_port }
        - port: { get_resource: node_five_tunnel_net_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash -v
            echo "$node_admin_ip $(hostname -s)" >> /etc/hosts
            sudo -H su -c 'echo "$deploy_public_key" >> ~/.ssh/authorized_keys' ubuntu

            ## Kubernetes Node DNS Resolution
            echo "search openstack.svc.cluster.local svc.cluster.local cluster.local" | sudo tee -a /etc/resolv.conf

            ### To persist these settings across reboots: the nameservers and search entries
            echo "search openstack.svc.cluster.local svc.cluster.local cluster.local" | sudo tee -a /etc/resolvconf/resolv.conf.d/base
            echo "options ndots:5 timeout:1 attempts:1" | sudo tee -a /etc/resolvconf/resolv.conf.d/base

            apt-get update
            apt-get install --no-install-recommends -y \
                    git

            sudo -H chown -R ubuntu: /opt
            sudo -H su -c 'git clone https://git.openstack.org/openstack/openstack-helm-infra /opt/openstack-helm-infra' ubuntu
            sudo -H su -c 'cd /opt/openstack-helm-infra; git checkout 27c46b56032abaea47fa7e7424fb6ead55061137' ubuntu
            
            line_to_rep_orig="      port: 9091"
            line_to_rep_new="      port: 9099"
            sudo sed -n "1h;2,\$H;\${g;s/$line_to_rep_orig/$line_to_rep_new/;p}" /opt/openstack-helm-infra/calico/values.yaml > /tmp/calcio-values.yaml
            sudo mv /tmp/calcio-values.yaml /opt/openstack-helm-infra/calico/values.yaml
            
            line_to_rep_orig="    FELIX_PROMETHEUSMETRICSPORT: \"9091\""
            line_to_rep_new="    FELIX_PROMETHEUSMETRICSPORT: \"9099\""
            sudo sed -n "1h;2,\$H;\${g;s/$line_to_rep_orig/$line_to_rep_new/;p}" /opt/openstack-helm-infra/calico/values.yaml > /tmp/calcio-values.yaml
            sudo mv /tmp/calcio-values.yaml /opt/openstack-helm-infra/calico/values.yaml
          params:
            $node_admin_ip: {get_attr: [node_five_private_net_port, fixed_ips, 0, ip_address]}
            $deploy_public_key: {get_attr: [deploy_key, public_key]}

  server_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: {get_param: public_net}
      port_id: { get_resource: node_one_private_net_port }
